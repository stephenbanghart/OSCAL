name: Generate Website
on:
  workflow_call:
    inputs:
      saxon_version:
        description: 'the version of Saxon to use'
        required: false
        default: '10.6'
        type: string
      hugo_version:
        description: 'the version of Hugo to use'
        required: false
        default: '0.83.1'
        type: string
      calabash_version:
        description: 'the version of XML Calabash to use'
        required: false
        default: '1.2.5-100'
        type: string
      commit_resources:
        description: 'commit the resources after generating them. Requires the access_token to be passed'
        required: false
        default: false
        type: boolean
    secrets:
      access_token:
        description: 'the access token to use for commits'
        required: false
  workflow_dispatch:
    branches:
    - main
    - develop
    - "release-*"
    inputs:
      saxon_version:
        description: 'the version of Saxon to use'
        required: true
        default: '10.6'
        type: string
      hugo_version:
        description: 'the version of Hugo to use'
        required: false
        default: '0.83.1'
        type: string
      calabash_version:
        description: 'the version of XML Calabash to use'
        required: false
        default: '1.2.5-100'
        type: string
      commit_resources:
        description: 'commit the resources after generating them. Requires a PAT defined as secrets.COMMIT_TOKEN'
        required: true
        default: false
        type: boolean
jobs:
  build-and-push-website:
    name: Build and Push Website
    runs-on: ubuntu-latest
    env:
      SAXON_VERSION: ${{ github.event.inputs.saxon_version }}${{ inputs.saxon_version }}
      CALABASH_HOME: dependencies/calabash
      CALABASH_VERSION: ${{ github.event.inputs.calabash_version }}${{ inputs.calabash_version }}
      HUGO_VERSION: ${{ github.event.inputs.hugo_version }}${{ inputs.hugo_version }}
      CICD_PATH: ./build/ci-cd
    steps:
    # use this for builds triggered from the UI on protected branches
    - name: Checkout Latest (using COMMIT_TOKEN)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.commit_resources == true
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.COMMIT_TOKEN }}
        submodules: recursive
    # use this for builds triggered from other workflows on protected branches
    - name: Checkout Latest (using access_token)
      if: github.event_name == 'push' && inputs.commit_resources == true
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.access_token }}
        submodules: recursive
    # use this for overything else (i.e., pull requests) where publication is not needed
    - name: Checkout Latest
      if: ${{ inputs.commit_resources == false }}
      uses: actions/checkout@v3
      with:
        submodules: recursive
    # Setup runtime environment
    # -------------------------
    # Java JDK 11
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: 'temurin'
        cache: 'maven'
    - name: Get Saxon-HE
      run: |
        mvn org.apache.maven.plugins:maven-dependency-plugin:2.10:get -DartifactId=Saxon-HE -DgroupId=net.sf.saxon -Dversion=${SAXON_VERSION}
    # Install Calabash
    - name: Install Calabash
      run: |
        wget https://github.com/ndw/xmlcalabash1/releases/download/${CALABASH_VERSION}/xmlcalabash-${CALABASH_VERSION}.zip
        mkdir -p "${CALABASH_HOME}"
        unzip -d "${CALABASH_HOME}" "xmlcalabash-${CALABASH_VERSION}.zip" && f=("${CALABASH_HOME}"/*) && mv "${CALABASH_HOME}"/*/* "${CALABASH_HOME}" && rmdir "${f[@]}"
    # Install Hugo
    - name: Install Hugo
      run: |
        wget https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_Linux-64bit.deb
        sudo apt-get install ./hugo_extended_${HUGO_VERSION}_Linux-64bit.deb
#      # Ruby and Bundler
#      - name: Install Ruby and Bundler
#        uses: ruby/setup-ruby@v1
#        with:
#          ruby-version: 2.6 # Not needed with a .ruby-version file
#          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
#          working-directory: ${{ env.OSCAL_WEBSITE_PATH }}
    # Build Artifacts
    # ---------------
    - name: Generate specification documentation
      run: |
        bash "${CICD_PATH}/generate-specification-documentation.sh"
    - uses: actions/upload-artifact@v2
      with:
        name: specification-docs
        path: |
          docs/content/documentation/processing/profile-resolution.html
        retention-days: 5
    - name: Run Hugo
      run: |
          hugo --config "config.yaml,development-config.yaml" -v --debug --minify
      working-directory: ${{ github.workspace }}/docs
    - name: Zip Artifacts for Upload
      run: |
        zip ${{ runner.temp }}/metaschema-website.zip -r public/
      working-directory: ${{ github.workspace }}/docs
    - uses: actions/upload-artifact@v2
      with:
        name: website
        path: |
          ${{ runner.temp }}/metaschema-website.zip
        retention-days: 5
    - name: Check internal links
      uses: untitaker/hyperlink@0.1.15
      with:
        args: '"${{ github.workspace }}/docs/public/" --sources "${{ github.workspace }}/docs/content" --check-anchors'
#      - name: Run HTMLProofer
#        run: |
#          cd "${OSCAL_WEBSITE_PATH}"
#          bundle exec htmlproofer --check-external-hash public/ --url-swap "https\://pages.nist.gov/OSCAL/:/" --assume-extension --log-level :debug --url-ignore "/pages.nist.gov\/(?:nist-header-footer|leaveNotice)\/.+/"
#      - uses: actions/upload-artifact@v2
#        with:
#          name: generated-docs
#          path: |
#            ${{ env.OSCAL_HOME }}/docs
#          retention-days: 5    # Store Built Artifacts
    - name: Run deploy script
      if: github.ref_name == 'main' && (github.event.inputs.commit_resources == true || inputs.commit_resources == true)
      run: |
          git config user.name "Deployment Bot"
          bash ./deploy.sh --push-only -v -m "Deploying website [ci deploy skip]"
      working-directory: ${{ github.workspace }}/docs
